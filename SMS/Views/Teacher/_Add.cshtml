@model SMS.Models.Teacher.TeacherBO


@using (Ajax.BeginForm("Add", "Teacher", new AjaxOptions
{
    HttpMethod = "POST",
    OnSuccess = "addTeacherSuccess",
    OnFailure = "addTeacherFailure"
}, new { @class = "border p-4 mx-auto ", style = "max-width: 600px;" }))
{

    @Html.HiddenFor(model => model.TeacherID)


    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="justify-content-center align-items-center">
        <h3 class="text-center" >Teacher</h3>

        <div class="form-group row m-2">
            <div class="col-md-4">

                @Html.LabelFor(model => model.TeacherRegNo, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8 ">

                @Html.EditorFor(model => model.TeacherRegNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Teacher RegNo", id = "TeacherRegNo" } })
                <span id="TeacherRegNo-error" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.TeacherRegNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">

                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">

                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">

                @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })
            </div>
            <div class="col-md-8">

                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", placeholder = "Middle Name" } })
                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">

                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">

                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">

                @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">

                @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control", placeholder = "Display Name", id = "TeaDisName" } })
                <span id="TeacherDisName-error" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email Address", type = "email", id = "TeacherEmail" } })
                <span id="TeacherEmail-error" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.Gender, new SelectList(new[]
                                                       {
                  new SelectListItem { Text = "Male", Value = "Male" },
                  new SelectListItem { Text = "Female", Value = "Female" },
                  new SelectListItem { Text = "Other", Value = "Other" },
              }, "Value", "Text"), "Gender", new { @class = "form-control form-select" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.DOB, "{0:MM-dd-yyyy}", new { @class = "form-control", placeholder = "MM-DD-YYYY", id = "DOB" })
                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">

                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">

                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Address" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">

                @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">

                @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Contact No" } })
                @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group row m-2">
            <div class="col-md-4">

                @Html.LabelFor(model => model.IsEnable, htmlAttributes: new { @class = "col-form-label" })
            </div>
            <div class="col-md-8">

                <div class="form-check m-3">
                    @Html.CheckBoxFor(model => model.IsEnable, new { @class = "form-check-input", id = "Enable" })
                </div>
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-10 offset-md-4">
                <br />
                <input type="submit" value="@((Model.TeacherID == 0 ? "Create" : "Update"))" class="btn text-light" style="background-color: #9F2B68" />
                <a href="#" class="btn btn-secondary" onclick="backTeacher()">Back</a>
            </div>
        </div>
    </div>

    <script>
        //Check RegNum  already exist
        $('#TeacherRegNo').change(function () {
            var regNo = $(this).val();
            $.ajax({
                url: '/Teacher/IsTeacherRegAvailable',
                type: 'GET',
                data: { regNo: regNo },
                success: function (response) {
                    $('#TeacherRegNo-error').text(response ? '' : 'Teacher RegNo already exists.');
                }
            });
        });


        //Check Display Name  already exist
        $('#TeaDisName').change(function () {
            var teacherName = $(this).val();
            $.ajax({
                url: '/Teacher/IsTeacherNameAvailable',
                type: 'GET',
                data: { teacherName: teacherName },
                success: function (response) {
                    $('#TeacherDisName-error').text(response ? '' : 'Teacher Display name already exists.');
                }
            });
        });

        //Check email  already exist
        $('#TeacherEmail').change(function () {
            var teacherEmail = $(this).val();
            $.ajax({
                url: '/Teacher/IsTeacherEmailAvailable',
                type: 'GET',
                data: { teacherEmail: teacherEmail },
                success: function (response) {
                    $('#TeacherEmail-error').text(response ? '' : 'Teacher Email already exists.');
                }
            });
        });

        $("#DOB").datepicker({
            dateFormat: "mm-dd-yy",
            changeYear: true,
            changeMonth: true,
            yearRange: "-100:+0", // Allow selecting a range of 100 years ago to the current year
            maxDate: "0" // Set the maximum selectable date to today
        });

    </script>

}


}
